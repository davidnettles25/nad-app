const express = require('express');
const mariadb = require('mariadb');
const cors = require('cors');
const path = require('path');
const compression = require('compression');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;
const HOST = process.env.HOST || 'localhost';

// ============================================================================
// MIDDLEWARE SETUP
// ============================================================================

app.set('trust proxy', 1);

app.use(helmet({
    contentSecurityPolicy: false,
    crossOriginEmbedderPolicy: false
}));

app.use(compression());

app.use(cors({
    origin: [
        'https://mynadtest.info',
        'https://www.mynadtest.info',
        'http://localhost:3000',
        'http://localhost:3001'
    ],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

const limiter = rateLimit({
    windowMs: 15 * 60 * 1000,
    max: 100,
    message: 'Too many requests from this IP, please try again later.',
    standardHeaders: true,
    legacyHeaders: false,
});
app.use('/api/', limiter);

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path} - IP: ${req.ip}`);
    next();
});

// ============================================================================
// MARIADB CONNECTION
// ============================================================================

let pool;

async function initializeDatabase() {
    try {
        console.log('🔗 Attempting MariaDB connection...');
        console.log(`📍 Host: ${process.env.DB_HOST}:${process.env.DB_PORT}`);
        console.log(`👤 User: ${process.env.DB_USER}`);
        console.log(`🗄️ Database: ${process.env.DB_NAME}`);
        
        pool = mariadb.createPool({
            host: process.env.DB_HOST,
            port: parseInt(process.env.DB_PORT) || 3306,
            user: process.env.DB_USER,
            password: process.env.DB_PASSWORD,
            database: process.env.DB_NAME,
            connectionLimit: 10,
            charset: 'utf8mb4',
            acquireTimeout: 10000,
            timeout: 10000,
            // MariaDB specific options
            insertIdAsNumber: true,
            bigIntAsNumber: true
        });
        
        // Test connection
        console.log('🔍 Testing MariaDB connection...');
        const conn = await pool.getConnection();
        const rows = await conn.query('SELECT 1 as test, NOW() as current_time, DATABASE() as current_db, VERSION() as version');
        conn.end();
        
        console.log('✅ MariaDB connected successfully');
        console.log('📊 Database info:', rows[0]);
        
        // Test supplements table
        const conn2 = await pool.getConnection();
        const supplements = await conn2.query('SELECT COUNT(*) as count FROM nad_supplements');
        conn2.end();
        console.log(`💊 Found ${supplements[0].count} supplements in database`);
        
        return true;
    } catch (error) {
        console.error('❌ MariaDB connection failed:');
        console.error('📍 Error Code:', error.code);
        console.error('📍 Error Number:', error.errno);
        console.error('📍 Message:', error.message);
        console.error('📍 Stack:', error.stack);
        return false;
    }
}

// ============================================================================
// ROUTES
// ============================================================================

// Health check
app.get('/health', async (req, res) => {
    const healthStatus = {
        status: 'healthy',
        timestamp: new Date().toISOString(),
        database: 'unknown',
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        version: '1.0.0',
        behind_proxy: true,
        environment: process.env.NODE_ENV,
        database_type: 'MariaDB'
    };
    
    try {
        const conn = await pool.getConnection();
        const rows = await conn.query('SELECT 1 as test, NOW() as db_time, DATABASE() as db_name, VERSION() as db_version');
        conn.end();
        
        healthStatus.database = 'connected';
        healthStatus.database_info = rows[0];
        
        res.json(healthStatus);
    } catch (error) {
        healthStatus.status = 'unhealthy';
        healthStatus.database = 'disconnected';
        healthStatus.database_error = error.message;
        
        res.status(500).json(healthStatus);
    }
});

// API test endpoint
app.get('/api/test', (req, res) => {
    res.json({
        message: 'NAD API is working with MariaDB!',
        timestamp: new Date().toISOString(),
        version: '1.0.0',
        database_type: 'MariaDB',
        database_status: pool ? 'pool_created' : 'no_pool'
    });
});

// Dashboard stats endpoint
app.get('/api/dashboard/stats', async (req, res) => {
    try {
        const conn = await pool.getConnection();
        
        const totalTests = await conn.query('SELECT COUNT(*) as total_tests FROM nad_test_ids');
        const activatedTests = await conn.query('SELECT COUNT(*) as activated_tests FROM nad_test_ids WHERE is_activated = 1');
        const completedTests = await conn.query('SELECT COUNT(*) as completed_tests FROM nad_test_scores');
        
        conn.end();
        
        const stats = {
            total_tests: totalTests[0].total_tests,
            activated_tests: activatedTests[0].activated_tests,
            completed_tests: completedTests[0].completed_tests,
            pending_tests: totalTests[0].total_tests - activatedTests[0].activated_tests
        };
        
        res.json({
            success: true,
            stats: stats
        });
    } catch (error) {
        console.error('Error fetching dashboard stats:', error);
        res.status(500).json({ 
            success: false, 
            error: error.message,
            hint: 'Check if nad_test_ids table exists'
        });
    }
});

// Supplements endpoint
app.get('/api/supplements', async (req, res) => {
    try {
        const conn = await pool.getConnection();
        const supplements = await conn.query('SELECT * FROM nad_supplements WHERE is_active = 1 ORDER BY name ASC');
        conn.end();
        
        res.json({
            success: true,
            supplements: supplements,
            count: supplements.length
        });
    } catch (error) {
        console.error('Error fetching supplements:', error);
        res.status(500).json({ 
            success: false, 
            error: error.message,
            hint: 'Check if nad_supplements table exists and has data'
        });
    }
});

// ============================================================================
// ERROR HANDLING
// ============================================================================

app.use((req, res) => {
    res.status(404).json({
        success: false,
        error: 'Endpoint not found',
        path: req.path,
        method: req.method,
        available_endpoints: [
            'GET /health',
            'GET /api/test', 
            'GET /api/dashboard/stats',
            'GET /api/supplements'
        ]
    });
});

app.use((error, req, res, next) => {
    console.error('❌ Unhandled error:', error);
    
    res.status(500).json({
        success: false,
        error: process.env.NODE_ENV === 'production' ? 'Internal server error' : error.message,
        timestamp: new Date().toISOString()
    });
});

// ============================================================================
// SERVER STARTUP
// ============================================================================

async function startServer() {
    try {
        console.log('🚀 Starting NAD Test Cycle API Server with MariaDB...');
        console.log('🔧 Environment:', process.env.NODE_ENV);
        console.log('📡 Host:', HOST);
        console.log('🔌 Port:', PORT);
        
        const dbConnected = await initializeDatabase();
        if (!dbConnected) {
            console.error('❌ Failed to connect to MariaDB. Exiting...');
            console.log('💡 Troubleshooting tips:');
            console.log('   1. Check if MariaDB is running: sudo /opt/bitnami/ctlscript.sh status mysql');
            console.log('   2. Verify credentials in .env file');
            console.log('   3. Test manual connection: mysql -u nad_user -p -h 127.0.0.1 nad_cycle');
            console.log('   4. Check MariaDB version: mysql --version');
            process.exit(1);
        }
        
        app.listen(PORT, HOST, () => {
            console.log('✅ NAD Test Cycle API Server Started Successfully with MariaDB!');
            console.log(`📡 Server running on ${HOST}:${PORT}`);
            console.log(`🔗 Health: http://${HOST}:${PORT}/health`);
            console.log(`📊 Test API: http://${HOST}:${PORT}/api/test`);
            console.log(`🎯 Ready for reverse proxy from https://mynadtest.info`);
        });
        
    } catch (error) {
        console.error('❌ Failed to start server:', error);
        process.exit(1);
    }
}

// Graceful shutdown
process.on('SIGTERM', async () => {
    console.log('🛑 SIGTERM received, shutting down gracefully...');
    if (pool) {
        await pool.end();
        console.log('✅ MariaDB connection pool closed');
    }
    process.exit(0);
});

process.on('SIGINT', async () => {
    console.log('🛑 SIGINT received, shutting down gracefully...');
    if (pool) {
        await pool.end();
        console.log('✅ MariaDB connection pool closed');
    }
    process.exit(0);
});

startServer();
