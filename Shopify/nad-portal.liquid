<!-- ============================================================================ -->
<!-- WORKING METAFIELD INTEGRATION - SYNTAX ERROR FIXED -->
<!-- Uses your existing webhook system with safe Liquid template rendering -->
<!-- ============================================================================ -->

<!-- File: pages/nad-portal.liquid -->
<!-- Replace your current nad-portal page content with this -->

{% if customer %}
  <div class="nad-portal-container" 
       data-customer-id="{{ customer.id }}"
       data-customer-email="{{ customer.email | escape }}"
       data-customer-first-name="{{ customer.first_name | escape }}"
       data-customer-last-name="{{ customer.last_name | escape }}">
    <div id="portal-options-container">
      <h1>NAD Test Portal</h1>
      <p>Welcome {{ customer.first_name }}! What would you like to do today?</p>
      
      <div class="portal-options">
        <div class="option-card">
          <h3>üß¨ Activate New Test Kit</h3>
          <p>Have a new test kit to activate? Enter your Test Kit ID below.</p>
          
          <form id="nad-activation-form">
            <div class="form-group">
              <label for="test-kit-id">Test Kit ID (Optional)</label>
              <input 
                type="text" 
                id="test-kit-id" 
                name="test_kit_id" 
                placeholder="2025-07-109-5K6TNE"
                title="Format: YYYY-MM-NNN-XXXXXX"
              >
              <small>Format: YYYY-MM-NNN-XXXXXX (leave blank to activate later)</small>
              <div id="format-validation" class="validation-message" style="display: none;"></div>
            </div>
            
            <button type="submit" id="activate-btn">Access Portal & Activate</button>
          </form>
        </div>
        
        <div class="option-card">
          <h3>üìä View My Tests & History</h3>
          <p>Check your existing test results, view history, or manage your account.</p>
          <button type="button" id="portal-only-btn" class="portal-btn">Go to Portal</button>
        </div>
      </div>
      
      <div id="error-message" class="error hidden"></div>
    </div>
    
    <div id="portal-status" class="hidden">
      <h2>Connecting to your portal...</h2>
      <p>Please wait while we prepare your NAD portal access.</p>
      <div class="spinner"></div>
      <p><small>This may take up to 30 seconds</small></p>
    </div>
  </div>

  <!-- Hidden iframe for metafield submission -->
  <iframe id="metafield-frame" name="metafield-frame" style="display: none;"></iframe>
  
  <!-- Hidden form for metafield updates -->
  {% if customer %}
    {% form 'customer', customer, id: 'metafield-form', target: 'metafield-frame', style: 'display: none;' %}
      <input type="hidden" name="customer[metafields][custom][test_kit_activation]" id="metafield-data">
      <input type="hidden" name="return_to" value="/pages/nad-portal">
    {% endform %}
  {% else %}
    <!-- Fallback form when customer object is not available -->
    <form id="metafield-form" method="post" action="/account" target="metafield-frame" style="display: none;">
      <input type="hidden" name="form_type" value="customer">
      <input type="hidden" name="utf8" value="‚úì">
      <input type="hidden" name="authenticity_token" value="" class="auth-token-placeholder">
      <input type="hidden" name="customer[metafields][custom][test_kit_activation]" id="metafield-data">
      <input type="hidden" name="return_to" value="/pages/nad-portal">
    </form>
  {% endif %}

  <style>
    .nad-portal-container {
      max-width: 700px;
      margin: 50px auto;
      padding: 20px;
      font-family: Arial, sans-serif;
    }
    
    .portal-options {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin: 30px 0;
    }
    
    .option-card {
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      padding: 20px;
      text-align: center;
      transition: border-color 0.3s;
    }
    
    .option-card:hover {
      border-color: #007bff;
    }
    
    .option-card h3 {
      margin-top: 0;
      color: #333;
    }
    
    .form-group {
      margin-bottom: 20px;
      text-align: left;
    }
    
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    
    input[type="text"] {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 16px;
      box-sizing: border-box;
      transition: border-color 0.3s;
    }
    
    input[type="text"]:focus {
      outline: none;
      border-color: #007bff;
    }
    
    input[type="text"].valid {
      border-color: #28a745;
    }
    
    input[type="text"].invalid {
      border-color: #dc3545;
    }
    
    button {
      background-color: #007bff;
      color: white;
      padding: 12px 24px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      width: 100%;
      transition: background-color 0.3s;
    }
    
    button:hover {
      background-color: #0056b3;
    }
    
    button:disabled {
      background-color: #ccc;
      cursor: not-allowed;
    }
    
    .portal-btn {
      background-color: #28a745;
    }
    
    .portal-btn:hover {
      background-color: #1e7e34;
    }
    
    .error {
      background-color: #f8d7da;
      color: #721c24;
      padding: 10px;
      border-radius: 4px;
      margin-top: 10px;
    }
    
    .validation-message {
      margin-top: 5px;
      font-size: 12px;
      padding: 5px 8px;
      border-radius: 3px;
      font-weight: 500;
    }
    
    .validation-message.valid {
      background-color: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    
    .validation-message.invalid {
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
    
    .hidden {
      display: none !important;
    }
    
    .spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #3498db;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 2s linear infinite;
      margin: 20px auto;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    #portal-status {
      text-align: center;
    }
    
    @media (max-width: 600px) {
      .portal-options {
        grid-template-columns: 1fr;
      }
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Try to extract CSRF token from Shopify checkout form if it exists
      const checkoutForm = document.querySelector('form[action="/cart"]');
      if (checkoutForm) {
        const checkoutToken = checkoutForm.querySelector('input[name="authenticity_token"]');
        if (checkoutToken && checkoutToken.value) {
          // Create meta tag for CSRF token
          const meta = document.createElement('meta');
          meta.name = 'csrf-token';
          meta.content = checkoutToken.value;
          document.head.appendChild(meta);
          console.log('‚úÖ Created CSRF meta tag from checkout form');
        }
      }
      
      // Get customer data safely from DOM attributes
      const portalContainer = document.querySelector('.nad-portal-container');
      const customerData = {
        id: portalContainer.dataset.customerId,
        email: portalContainer.dataset.customerEmail,
        firstName: portalContainer.dataset.customerFirstName,
        lastName: portalContainer.dataset.customerLastName
      };

      const activationForm = document.getElementById('nad-activation-form');
      const portalOnlyBtn = document.getElementById('portal-only-btn');
      const optionsContainer = document.getElementById('portal-options-container');
      const statusContainer = document.getElementById('portal-status');
      const errorMessage = document.getElementById('error-message');
      const activateBtn = document.getElementById('activate-btn');
      const testKitInput = document.getElementById('test-kit-id');
      const validationDiv = document.getElementById('format-validation');
      const metafieldForm = document.getElementById('metafield-form');
      const metafieldFrame = document.getElementById('metafield-frame');

      console.log('üè™ Metafield Portal initialized for:', customerData.email);

      // Set authenticity token with better debugging and validation
      const authToken = getAuthenticityToken();
      console.log('üîë Using authenticity token:', authToken ? 'Found (' + authToken.length + ' chars)' : 'Missing');
      
      // Handle authenticity token
      if (!authToken) {
        console.error('‚ùå CRITICAL: No authenticity token found! Form submission will fail.');
        showError('Authentication token missing. Please refresh the page and try again.');
        return;
      }
      
      // Set token in form if we have a placeholder
      const tokenInput = metafieldForm.querySelector('input[name="authenticity_token"]');
      if (tokenInput) {
        tokenInput.value = authToken;
        console.log('‚úÖ Set authenticity token in form');
      } else {
        console.log('‚úÖ Using Shopify form system - CSRF protection handled automatically');
      }

      // Real-time test ID validation
      if (testKitInput) {
        testKitInput.addEventListener('input', function() {
          const value = this.value.trim();
          
          if (value === '') {
            validationDiv.style.display = 'none';
            this.className = '';
            return;
          }
          
          const isValid = validateTestKitId(value);
          
          validationDiv.style.display = 'block';
          if (isValid) {
            validationDiv.textContent = '‚úì Valid test ID format';
            validationDiv.className = 'validation-message valid';
            this.className = 'valid';
          } else {
            validationDiv.textContent = '‚ö† Please check your test ID format';
            validationDiv.className = 'validation-message invalid';
            this.className = 'invalid';
          }
        });
      }

      // Handle test kit activation form
      activationForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const testKitId = testKitInput.value.trim();
        
        if (testKitId && !validateTestKitId(testKitId)) {
          showError('Please enter a valid Test Kit ID or leave blank to activate later');
          return;
        }
        
        hideError();
        initiatePortalAccess(testKitId, 'activation');
      });

      // Handle portal-only access
      portalOnlyBtn.addEventListener('click', function() {
        hideError();
        initiatePortalAccess('', 'portal_only');
      });

      // Test ID validation for multiple formats
      function validateTestKitId(id) {
        if (!id) return true; // Empty is allowed
        
        const patterns = [
          /^\d{4}-\d{2}-\d{1,3}-[A-Za-z0-9]{5,6}$/,  // New format: 2025-07-109-5K6TNE
          /^\d{4}-\d{2}-\d{3}-\d{6}$/,                // Old format: 2025-07-123-456789
          /^NAD-\d{8}-\d{4}$/                         // Legacy format: NAD-20250728-1234
        ];
        
        return patterns.some(pattern => pattern.test(id));
      }

      function showError(message) {
        errorMessage.textContent = message;
        errorMessage.classList.remove('hidden');
      }

      function hideError() {
        errorMessage.classList.add('hidden');
      }

      function initiatePortalAccess(testKitId, requestType) {
        const sessionId = generateSessionId();
        
        console.log('üöÄ Initiating portal access via existing metafield webhook system');
        console.log('üìã Request details:', {
          testKitId: testKitId || 'None',
          requestType: requestType,
          sessionId: sessionId,
          customerId: customerData.id,
          email: customerData.email
        });
        
        // Show loading state
        showLoadingState();
        
        // Create metafield data matching your webhook handler expectations
        const metafieldData = {
          testKitId: testKitId || '',
          timestamp: Date.now(),
          sessionId: sessionId,
          requestType: requestType,
          // Additional data for webhook processing
          shopifyCustomerId: customerData.id,
          customerEmail: customerData.email,
          customerName: customerData.firstName + ' ' + customerData.lastName
        };
        
        // Submit metafield via hidden form (this triggers webhook)
        submitMetafieldUpdate(metafieldData, sessionId);
      }

      function submitMetafieldUpdate(data, sessionId) {
        console.log('üìù Submitting metafield update to trigger webhook...');
        console.log('üìã Metafield data:', data);
        
        // Try AJAX method first (more reliable)
        submitViaAjax(data, sessionId).catch(error => {
          console.warn('üîÑ AJAX method failed, trying iframe method:', error);
          submitViaIframe(data, sessionId);
        });
      }

      // Method 1: AJAX submission (preferred)
      async function submitViaAjax(data, sessionId) {
        const authToken = getAuthenticityToken();
        if (!authToken) {
          throw new Error('No authenticity token available');
        }

        const formData = new URLSearchParams();
        formData.append('form_type', 'customer');
        formData.append('utf8', '‚úì');
        formData.append('authenticity_token', authToken);
        formData.append('customer[metafields][custom][test_kit_activation]', JSON.stringify(data));
        formData.append('return_to', '/pages/nad-portal');

        console.log('üì§ AJAX submission with token:', authToken.substring(0, 10) + '...');

        const response = await fetch('/account', {
          method: 'POST',
          body: formData,
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          },
          credentials: 'same-origin'
        });

        if (response.ok || response.redirected) {
          console.log('‚úÖ AJAX metafield submission successful');
          console.log('‚è≥ Waiting for webhook to fire and process...');
          setTimeout(() => startPolling(sessionId), 3000);
        } else {
          console.error('‚ùå AJAX submission failed:', response.status, response.statusText);
          throw new Error('AJAX submission failed: ' + response.status);
        }
      }

      // Method 2: Iframe submission (fallback)
      function submitViaIframe(data, sessionId) {
        // Set metafield data
        document.getElementById('metafield-data').value = JSON.stringify(data);
        
        // Log the form data being submitted
        const formData = new FormData(metafieldForm);
        console.log('üì§ Iframe form data being submitted:');
        for (let [key, value] of formData.entries()) {
          console.log('  ' + key + ': ' + value);
        }
        
        // Set up iframe load handler to detect completion
        let submitted = false;
        metafieldFrame.onload = function() {
          if (!submitted) {
            submitted = true;
            console.log('‚úÖ Iframe metafield form submitted to Shopify');
            console.log('‚è≥ Waiting for webhook to fire and process...');
            // Give webhook more time to process before polling
            setTimeout(() => startPolling(sessionId), 3000);
          }
        };
        
        // Handle iframe errors
        metafieldFrame.onerror = function() {
          console.error('‚ùå Iframe metafield form submission failed');
          showPortalError('Failed to submit metafield update. Please try again.');
        };
        
        // Submit the form (this should trigger Shopify webhook to NAD server)
        console.log('üöÄ Submitting form to Shopify via iframe...');
        metafieldForm.submit();
      }

      function startPolling(sessionId) {
        let attempts = 0;
        const maxAttempts = 30; // 30 seconds
        
        function poll() {
          attempts++;
          
          console.log('üîç Polling attempt ' + attempts + '/' + maxAttempts + ' for session: ' + sessionId);
          
          // CORRECTED: Poll the NAD server (mynadtest.info), not Shopify store
          fetch('https://mynadtest.info/shopify/check-portal-access?session=' + sessionId)
            .then(response => response.json())
            .then(data => {
              console.log('üì° Polling response:', data);
              
              if (data.ready && data.portalUrl) {
                console.log('üéâ Portal ready! Redirecting to:', data.portalUrl);
                // Redirect to the portal with encrypted session token
                window.location.href = data.portalUrl;
              } else if (data.error) {
                console.error('‚ùå Portal access error:', data.error);
                showPortalError(data.error);
              } else if (data.processing && attempts < maxAttempts) {
                console.log('‚è≥ Still processing, polling again in 2 seconds...');
                setTimeout(poll, 2000);
              } else if (attempts >= maxAttempts) {
                console.error('‚è∞ Portal access timeout after ' + maxAttempts + ' attempts');
                showPortalError('Portal access timeout. Please try again.');
              } else {
                console.log('üîÑ Unknown response, continuing to poll...');
                setTimeout(poll, 2000);
              }
            })
            .catch(error => {
              console.error('‚ùå Polling error:', error);
              if (attempts < maxAttempts) {
                console.log('üîÑ Retrying poll in 3 seconds due to error');
                setTimeout(poll, 3000);
              } else {
                showPortalError('Connection error. Please try again.');
              }
            });
        }
        
        // Start polling
        poll();
      }

      function generateSessionId() {
        const timestamp = Date.now().toString(36);
        const random = Math.random().toString(36).substr(2, 9);
        return 'session_' + timestamp + '_' + random;
      }

      function getAuthenticityToken() {
        // Try multiple methods to get the authenticity token
        const metaToken = document.querySelector('meta[name="csrf-token"]');
        if (metaToken && metaToken.getAttribute('content')) {
          const token = metaToken.getAttribute('content');
          console.log('üîë Found authenticity token in meta tag:', token.substring(0, 10) + '...');
          return token;
        }
        
        const formToken = document.querySelector('input[name="authenticity_token"]');
        if (formToken && formToken.value) {
          const token = formToken.value;
          console.log('üîë Found authenticity token in form input:', token.substring(0, 10) + '...');
          return token;
        }
        
        // Extract from any form on the page
        const anyForm = document.querySelector('form input[name="authenticity_token"]');
        if (anyForm && anyForm.value) {
          const token = anyForm.value;
          console.log('üîë Found authenticity token in page form:', token.substring(0, 10) + '...');
          return token;
        }
        
        // Try to get from Shopify's global context
        if (window.Shopify && window.Shopify.authenticity_token) {
          const token = window.Shopify.authenticity_token;
          console.log('üîë Found authenticity token in Shopify global:', token.substring(0, 10) + '...');
          return token;
        }
        
        // Try to extract from page scripts or other forms
        const scripts = document.querySelectorAll('script');
        for (const script of scripts) {
          const match = script.textContent.match(/authenticity_token["\s]*:["\s]*"([^"]+)"/);
          if (match && match[1]) {
            console.log('üîë Found authenticity token in script:', match[1].substring(0, 10) + '...');
            return match[1];
          }
        }
        
        // Check for token in any customer account forms
        const accountForms = document.querySelectorAll('form[action*="/account"]');
        for (const form of accountForms) {
          const tokenInput = form.querySelector('input[name="authenticity_token"]');
          if (tokenInput && tokenInput.value) {
            console.log('üîë Found authenticity token in account form:', tokenInput.value.substring(0, 10) + '...');
            return tokenInput.value;
          }
        }
        
        console.error('‚ùå Could not find valid authenticity token anywhere!');
        console.log('üîç Available meta tags with csrf:', document.querySelectorAll('meta[name="csrf-token"]'));
        console.log('üîç Available auth inputs:', document.querySelectorAll('input[name="authenticity_token"]'));
        console.log('üîç Available forms:', document.querySelectorAll('form'));
        console.log('üîç Shopify object:', window.Shopify);
        
        return '';
      }

      function showLoadingState() {
        // Disable buttons
        activateBtn.disabled = true;
        portalOnlyBtn.disabled = true;
        activateBtn.textContent = 'Processing...';
        portalOnlyBtn.textContent = 'Processing...';
        
        // Show status screen
        optionsContainer.classList.add('hidden');
        statusContainer.classList.remove('hidden');
      }

      function showPortalError(message) {
        statusContainer.innerHTML = '<h2>Portal Access Failed</h2><p class="error">' + message + '</p><button onclick="location.reload()" style="background: #dc3545; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer;">Try Again</button>';
      }
    });
  </script>

{% else %}
  <!-- Customer not logged in -->
  <div class="nad-portal-container">
    <h1>Login Required</h1>
    <p>Please log in to your account to access the NAD Test Portal.</p>
    <a href="/account/login?return_url={{ request.url | url_encode }}" class="login-btn">
      Login to Your Account
    </a>
  </div>

  <style>
    .nad-portal-container {
      max-width: 500px;
      margin: 50px auto;
      padding: 20px;
      text-align: center;
      font-family: Arial, sans-serif;
    }
    
    .login-btn {
      display: inline-block;
      background-color: #007bff;
      color: white;
      padding: 12px 24px;
      text-decoration: none;
      border-radius: 4px;
      margin-top: 20px;
    }
    
    .login-btn:hover {
      background-color: #0056b3;
    }
  </style>
{% endif %}